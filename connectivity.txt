DIGITAL ART GALLERY - FRONTEND-BACKEND CONNECTIVITY DOCUMENTATION

1. SERVER SETUP & DATABASE CONNECTION
--------------------------------------
// app.js
const express = require('express');
const app = express();
const mongoose = require('mongoose');
const MONGO_URL = "mongodb://127.0.0.1:27017/digital_art_gallery";

// Database Connection
main()
    .then(() => console.log('Connected to MongoDB'))
    .catch((err) => console.error('Could not connect to MongoDB', err));

async function main() {
    await mongoose.connect(MONGO_URL);
}

// Essential Middleware
app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));
app.use(express.urlencoded({ extended: true }));
app.use(methodOverride("_method"));
app.use(express.static(path.join(__dirname, "/public")));

2. SESSION MANAGEMENT
---------------------
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: true,
    cookie: { secure: false }
}));

3. AUTHENTICATION ROUTES
------------------------
// Login Routes (app.js)
app.post('/login/admin', (req, res) => {
    const { username, password } = req.body;
    if (username === 'admin' && password === 'admin123') {
        req.session.isAdmin = true;
        req.session.isUser = false;
        return res.redirect('/arts');
    }
    res.render('login.ejs', { error: 'Invalid credentials' });
});

// Frontend Login Form (login.ejs)
<form id="loginForm" action="/login/admin" method="POST">
    <input type="text" name="username" required>
    <input type="password" name="password" required>
    <button type="submit">Login</button>
</form>

4. ART MANAGEMENT ROUTES
------------------------
// Create New Art (app.js)
app.post("/arts", async (req, res) => {
    try {
        const newArt = new Art(req.body.art);
        await newArt.save();
        res.redirect("/arts");
    } catch (err) {
        res.render("arts/new.ejs", { 
            error: err.message,
            art: req.body.art,
            isAdmin: true 
        });
    }
});

// Frontend Art Form (new.ejs)
<form action="/arts" method="POST" class="needs-validation" novalidate>
    <input type="text" name="art[title]" required>
    <textarea name="art[description]" required></textarea>
    <input type="url" name="art[image]" required>
    <input type="number" name="art[price]" required>
    <select name="art[category]" required>
        <!-- category options -->
    </select>
    <input type="text" name="art[artistName]" required>
    <button type="submit">Add Artwork</button>
</form>

5. DATA DISPLAY ROUTES
----------------------
// Fetch All Arts (app.js)
app.get("/arts", async (req, res) => {
    if (!req.session.isAdmin) return res.redirect('/login');
    const allArts = await Art.find({});
    res.render("arts/index.ejs", { allArts, isAdmin: true });
});

// Frontend Display (index.ejs)
<div class="row">
    <% for(let art of allArts) { %>
        <div class="col">
            <img src="<%= art.image %>">
            <h5><%= art.title %></h5>
            <p><%= art.description %></p>
            <p>₹<%= art.price %></p>
        </div>
    <% } %>
</div>

6. DATA MODEL (SCHEMA)
----------------------
// models/arts.js
const artSchema = new Schema({
    title: {
        type: String,
        required: [true, 'Title is required'],
        minLength: [3, 'Title must be at least 3 characters']
    },
    description: String,
    image: {
        type: String,
        required: true
    },
    price: {
        type: Number,
        required: true,
        min: 0
    },
    category: {
        type: String,
        required: true,
        enum: ['Painting', 'Sculpture', 'Digital Art', /* other categories */]
    },
    artistName: String
});

7. ERROR HANDLING
-----------------
// Global Error Handler (app.js)
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

process.on('unhandledRejection', (reason, promise) => {
    console.log('Unhandled Rejection:', reason);
});

8. DATA FLOW
------------
1. User submits form → Frontend validation
2. Data sent to backend route → Server-side validation
3. Data saved to MongoDB → Response sent back
4. Frontend updated based on response

9. SECURITY MEASURES
-------------------
- Session-based authentication
- Form validation (client & server side)
- MongoDB schema validation
- Protected admin routes
- Error handling and logging

10. FILE STRUCTURE
-----------------
DIGITAL ART GALLERY - PROJECT STRUCTURE

root/
│
├── node_modules/               # Dependencies installed via npm
│
├── models/                     # Database models
│   └── arts.js                # Art schema and model
│
├── views/                     # EJS template files
│   ├── layouts/
│   │   └── boilerplate.ejs    # Base layout template
│   │
│   ├── includes/
│   │   ├── navbar.ejs         # Navigation bar component
│   │   └── footer.ejs         # Footer component
│   │
│   ├── arts/                  # Admin art views
│   │   ├── index.ejs         # Gallery view
│   │   ├── new.ejs           # New art form
│   │   ├── edit.ejs          # Edit art form
│   │   ├── show.ejs          # Single art view
│   │   └── buy.ejs           # Buy art page
│   │
│   ├── arts_user/            # User art views
│   │   ├── index.ejs         # User gallery view
│   │   └── show.ejs          # User single art view
│   │
│   ├── login.ejs             # Login page
│   ├── team.ejs             # Team page
│   ├── artists.ejs          # Artists page
│   └── exhibition.ejs       # Exhibition page
│
├── public/                   # Static files
│   ├── css/
│   │   └── style.css        # Main stylesheet
│   │
│   ├── js/
│   │   └── script.js        # Client-side JavaScript
│   │
│   └── images/              # Image assets
│
├── app.js                   # Main application file
├── package.json            # Project metadata and dependencies
├── package-lock.json       # Locked dependencies
├── .gitignore             # Git ignore file
├── connectivity.txt        # Connectivity documentation
└── README.md              # Project documentation

Key Files Description:
--------------------
1. app.js
   - Main server file
   - Contains routes and middleware
   - Database connection
   - Session management

2. models/arts.js
   - MongoDB schema definition
   - Data validation rules
   - Model methods

3. views/layouts/boilerplate.ejs
   - Common HTML structure
   - Shared head content
   - Script and style includes

4. views/includes/
   - Reusable components
   - Navigation and footer

5. views/arts/ & views/arts_user/
   - Separate views for admin and users
   - CRUD operations (admin)
   - View-only operations (users)

6. public/css/style.css
   - Global styles
   - Component-specific styles
   - Responsive design rules

Dependencies (package.json):
--------------------------
- express: Web framework
- mongoose: MongoDB ODM
- ejs: Template engine
- ejs-mate: Layout support
- express-session: Session management
- method-override: HTTP method override
- path: File path operations 